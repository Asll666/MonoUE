<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#
//
// Copyright (c) Microsoft Corporation.  All Rights Reserved.
// See LICENSE.txt in the plugin root for license information.
#>
//
// THIS FILE WAS GENERATED AUTOMATICALLY FROM THE INPUT INI FILES
// ANY CHANGES YOU MAKE TO IT WILL BE LOST
//
<#if(HasNamespace){#>
namespace <#=Namespace#>
{
<#}#>
	static class InputAction
	{
<#foreach (var a in ActionMappings.OrderBy(s => s)){#>
		public const string <#=this.ConvertToVariableName(a)#> = "<#=a#>";
<#}#>
	}

	static class InputAxis
	{
<#foreach (var a in AxisMappings.OrderBy(s => s)){#>
		public const string <#=ConvertToVariableName(a)#> = "<#=a#>";
<#}#>
	}
<#if(HasNamespace){#>
}
<#}#>
<#+
	public string Namespace { get; set; }
	public HashSet<string> ActionMappings { get; set; } = new HashSet<string>();
	public HashSet<string> AxisMappings { get; set; } = new HashSet<string>();

	public bool HasNamespace { get { return !string.IsNullOrWhiteSpace(Namespace); } }

	private System.CodeDom.Compiler.CodeDomProvider codeDomProvider = System.CodeDom.Compiler.CodeDomProvider.CreateProvider("C#");
	private List<string> usedVariableNames = new List<string>();

	// Start: From Mono source

	public bool is_identifier_start_character(char c)
	{
		return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == '@' || char.IsLetter(c);
	}

	public bool is_identifier_part_character(char c)
	{
		return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || (c >= '0' && c <= '9') || char.IsLetter(c);
	}

	// End: From Mono source

	public string ConvertToVariableName(string variableName)
	{
		string newVariableName = variableName;

		if (!codeDomProvider.IsValidIdentifier(variableName))
		{
	        // Remove all chars which are no letter or digit except underscore

	        newVariableName = "";

		    bool firstChar = true;
			foreach (char toCheck in variableName)
			{
				if (firstChar && is_identifier_start_character(toCheck) || (!firstChar && is_identifier_part_character(toCheck)))
				{
					newVariableName += toCheck;
				}
			}
		}

	    // Since we might change variable names, lets check if it is used already and get a substitute
		if (usedVariableNames.Contains(newVariableName) || codeDomProvider.CreateValidIdentifier(newVariableName)!=newVariableName)
		{
		    int suffix = 1;
			while (usedVariableNames.Contains(newVariableName + suffix))
			{
				suffix++;
			}

			newVariableName += suffix;
		}

		usedVariableNames.Add(newVariableName);
		return newVariableName;
	}
#>