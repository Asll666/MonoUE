<#@ template language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
//
// THIS FILE HAS BEEN GENERATED BY A TOOL
// DO NOT UPDATE MANUALLY
//
// Copyright (c) Microsoft Corporation.  All Rights Reserved.
// See LICENSE.txt in the plugin root for license information.

using System;
using System.Runtime.InteropServices;

namespace UnrealEngine.MainDomain
{
    // not threadsafe
    static class FEditorDelegates
    {
<#GenerateEventWrapper("BeginPIE", "bool");#>

<#GenerateEventWrapper("EndPIE", "bool");#>

<#GenerateEventWrapper("PausePIE", "bool");#>

<#GenerateEventWrapper("ResumePIE", "bool");#>

<#GenerateEventWrapper("SingleStepPIE", "bool");#>

<#GenerateEventWrapper("BeginLocalPlay", "uint");#>
    }
}

<#+
void GenerateEventWrapper (string name, params string[] argTypes)
{
    var type = "Action<" + string.Join(", ", argTypes) + ">";
	var pars = Enumerable.Range(0, argTypes.Length).Select(i => "p" + i).ToArray();
#>
        [DllImport("MonoEditor")]
        static extern ulong MonoIdeAgent_FEditorDelegates_<#=name#>_Add(<#=type#> handler);

        [DllImport("MonoEditor")]
        static extern void MonoIdeAgent_FEditorDelegates_<#=name#>_Remove(ulong delegateHandle);

		//handle to the managed interop delegate so it doesn't get garbage collected
        static <#=type#> On<#=name#>Instance;

		//handle to the manager helper delegate so it can be removed
        static ulong On<#=name#>Handle;

		//the delegates that have been registered for the event
        static event <#=type#> <#=name#>Store;

        public static event <#=type#> <#=name#> {
            add {
                if(<#=name#>Store == null) {
                    On<#=name#>Instance = On<#=name#>;
                    On<#=name#>Handle = MonoIdeAgent_FEditorDelegates_<#=name#>_Add(On<#=name#>Instance);
                }
                <#=name#>Store += value;
            }
            remove {
                <#=name#>Store -= value;
                if(<#=name#>Store == null) {
                    MonoIdeAgent_FEditorDelegates_<#=name#>_Remove(On<#=name#>Handle);
                    On<#=name#>Instance = null;
                }
            }
        }

        static void On<#=name#>(<#=string.Join(", ",argTypes.Zip (pars,(a,b) => a+ " " + b))#>)
        {
            <#=name#>Store?.Invoke(<#=string.Join(", ",pars)#>);
        }
<#+
}
#>