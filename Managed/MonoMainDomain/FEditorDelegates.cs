




//
// THIS FILE HAS BEEN GENERATED BY A TOOL
// DO NOT UPDATE MANUALLY
//
// Copyright (c) Microsoft Corporation.  All Rights Reserved.
// See LICENSE.txt in the plugin root for license information.

using System;
using System.Runtime.InteropServices;

namespace UnrealEngine.MainDomain
{
    // not threadsafe
    static class FEditorDelegates
    {

        [DllImport("MonoEditor")]
        static extern ulong MonoIdeAgent_FEditorDelegates_BeginPIE_Add(Action<bool> handler);

        [DllImport("MonoEditor")]
        static extern void MonoIdeAgent_FEditorDelegates_BeginPIE_Remove(ulong delegateHandle);

		//handle to the managed interop delegate so it doesn't get garbage collected
        static Action<bool> OnBeginPIEInstance;

		//handle to the manager helper delegate so it can be removed
        static ulong OnBeginPIEHandle;

		//the delegates that have been registered for the event
        static event Action<bool> BeginPIEStore;

        public static event Action<bool> BeginPIE {
            add {
                if(BeginPIEStore == null) {
                    OnBeginPIEInstance = OnBeginPIE;
                    OnBeginPIEHandle = MonoIdeAgent_FEditorDelegates_BeginPIE_Add(OnBeginPIEInstance);
                }
                BeginPIEStore += value;
            }
            remove {
                BeginPIEStore -= value;
                if(BeginPIEStore == null) {
                    MonoIdeAgent_FEditorDelegates_BeginPIE_Remove(OnBeginPIEHandle);
                    OnBeginPIEInstance = null;
                }
            }
        }

        static void OnBeginPIE(bool p0)
        {
            BeginPIEStore?.Invoke(p0);
        }



        [DllImport("MonoEditor")]
        static extern ulong MonoIdeAgent_FEditorDelegates_EndPIE_Add(Action<bool> handler);

        [DllImport("MonoEditor")]
        static extern void MonoIdeAgent_FEditorDelegates_EndPIE_Remove(ulong delegateHandle);

		//handle to the managed interop delegate so it doesn't get garbage collected
        static Action<bool> OnEndPIEInstance;

		//handle to the manager helper delegate so it can be removed
        static ulong OnEndPIEHandle;

		//the delegates that have been registered for the event
        static event Action<bool> EndPIEStore;

        public static event Action<bool> EndPIE {
            add {
                if(EndPIEStore == null) {
                    OnEndPIEInstance = OnEndPIE;
                    OnEndPIEHandle = MonoIdeAgent_FEditorDelegates_EndPIE_Add(OnEndPIEInstance);
                }
                EndPIEStore += value;
            }
            remove {
                EndPIEStore -= value;
                if(EndPIEStore == null) {
                    MonoIdeAgent_FEditorDelegates_EndPIE_Remove(OnEndPIEHandle);
                    OnEndPIEInstance = null;
                }
            }
        }

        static void OnEndPIE(bool p0)
        {
            EndPIEStore?.Invoke(p0);
        }



        [DllImport("MonoEditor")]
        static extern ulong MonoIdeAgent_FEditorDelegates_PausePIE_Add(Action<bool> handler);

        [DllImport("MonoEditor")]
        static extern void MonoIdeAgent_FEditorDelegates_PausePIE_Remove(ulong delegateHandle);

		//handle to the managed interop delegate so it doesn't get garbage collected
        static Action<bool> OnPausePIEInstance;

		//handle to the manager helper delegate so it can be removed
        static ulong OnPausePIEHandle;

		//the delegates that have been registered for the event
        static event Action<bool> PausePIEStore;

        public static event Action<bool> PausePIE {
            add {
                if(PausePIEStore == null) {
                    OnPausePIEInstance = OnPausePIE;
                    OnPausePIEHandle = MonoIdeAgent_FEditorDelegates_PausePIE_Add(OnPausePIEInstance);
                }
                PausePIEStore += value;
            }
            remove {
                PausePIEStore -= value;
                if(PausePIEStore == null) {
                    MonoIdeAgent_FEditorDelegates_PausePIE_Remove(OnPausePIEHandle);
                    OnPausePIEInstance = null;
                }
            }
        }

        static void OnPausePIE(bool p0)
        {
            PausePIEStore?.Invoke(p0);
        }



        [DllImport("MonoEditor")]
        static extern ulong MonoIdeAgent_FEditorDelegates_ResumePIE_Add(Action<bool> handler);

        [DllImport("MonoEditor")]
        static extern void MonoIdeAgent_FEditorDelegates_ResumePIE_Remove(ulong delegateHandle);

		//handle to the managed interop delegate so it doesn't get garbage collected
        static Action<bool> OnResumePIEInstance;

		//handle to the manager helper delegate so it can be removed
        static ulong OnResumePIEHandle;

		//the delegates that have been registered for the event
        static event Action<bool> ResumePIEStore;

        public static event Action<bool> ResumePIE {
            add {
                if(ResumePIEStore == null) {
                    OnResumePIEInstance = OnResumePIE;
                    OnResumePIEHandle = MonoIdeAgent_FEditorDelegates_ResumePIE_Add(OnResumePIEInstance);
                }
                ResumePIEStore += value;
            }
            remove {
                ResumePIEStore -= value;
                if(ResumePIEStore == null) {
                    MonoIdeAgent_FEditorDelegates_ResumePIE_Remove(OnResumePIEHandle);
                    OnResumePIEInstance = null;
                }
            }
        }

        static void OnResumePIE(bool p0)
        {
            ResumePIEStore?.Invoke(p0);
        }



        [DllImport("MonoEditor")]
        static extern ulong MonoIdeAgent_FEditorDelegates_SingleStepPIE_Add(Action<bool> handler);

        [DllImport("MonoEditor")]
        static extern void MonoIdeAgent_FEditorDelegates_SingleStepPIE_Remove(ulong delegateHandle);

		//handle to the managed interop delegate so it doesn't get garbage collected
        static Action<bool> OnSingleStepPIEInstance;

		//handle to the manager helper delegate so it can be removed
        static ulong OnSingleStepPIEHandle;

		//the delegates that have been registered for the event
        static event Action<bool> SingleStepPIEStore;

        public static event Action<bool> SingleStepPIE {
            add {
                if(SingleStepPIEStore == null) {
                    OnSingleStepPIEInstance = OnSingleStepPIE;
                    OnSingleStepPIEHandle = MonoIdeAgent_FEditorDelegates_SingleStepPIE_Add(OnSingleStepPIEInstance);
                }
                SingleStepPIEStore += value;
            }
            remove {
                SingleStepPIEStore -= value;
                if(SingleStepPIEStore == null) {
                    MonoIdeAgent_FEditorDelegates_SingleStepPIE_Remove(OnSingleStepPIEHandle);
                    OnSingleStepPIEInstance = null;
                }
            }
        }

        static void OnSingleStepPIE(bool p0)
        {
            SingleStepPIEStore?.Invoke(p0);
        }



        [DllImport("MonoEditor")]
        static extern ulong MonoIdeAgent_FEditorDelegates_BeginLocalPlay_Add(Action<uint> handler);

        [DllImport("MonoEditor")]
        static extern void MonoIdeAgent_FEditorDelegates_BeginLocalPlay_Remove(ulong delegateHandle);

		//handle to the managed interop delegate so it doesn't get garbage collected
        static Action<uint> OnBeginLocalPlayInstance;

		//handle to the manager helper delegate so it can be removed
        static ulong OnBeginLocalPlayHandle;

		//the delegates that have been registered for the event
        static event Action<uint> BeginLocalPlayStore;

        public static event Action<uint> BeginLocalPlay {
            add {
                if(BeginLocalPlayStore == null) {
                    OnBeginLocalPlayInstance = OnBeginLocalPlay;
                    OnBeginLocalPlayHandle = MonoIdeAgent_FEditorDelegates_BeginLocalPlay_Add(OnBeginLocalPlayInstance);
                }
                BeginLocalPlayStore += value;
            }
            remove {
                BeginLocalPlayStore -= value;
                if(BeginLocalPlayStore == null) {
                    MonoIdeAgent_FEditorDelegates_BeginLocalPlay_Remove(OnBeginLocalPlayHandle);
                    OnBeginLocalPlayInstance = null;
                }
            }
        }

        static void OnBeginLocalPlay(uint p0)
        {
            BeginLocalPlayStore?.Invoke(p0);
        }

    }
}

